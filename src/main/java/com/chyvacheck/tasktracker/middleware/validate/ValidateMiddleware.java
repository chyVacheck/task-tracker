
/**
 * @file ValidateMiddleware.java
 * 
 * @description
 * Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ API.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (body), query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ path-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
 * 
 * @details
 * –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
 * - –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ DTO
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ DTO —á–µ—Ä–µ–∑ Jakarta Bean Validation
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π (BaseException)
 * 
 * –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
 * - fromBody(Context ctx, Class<T> dtoClass) ‚Äî –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (JSON)
 * - fromQuery(Context ctx, Class<T> dtoClass) ‚Äî –≤–∞–ª–∏–¥–∞—Ü–∏—è query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 * - fromPath(Context ctx, Class<T> dtoClass) ‚Äî –≤–∞–ª–∏–¥–∞—Ü–∏—è path-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 * 
 * –í—Å–µ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç ErrorResponse.
 * 
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ:
 * TaskCreateDto dto = ValidateMiddleware.fromBody(ctx, TaskCreateDto.class);
 * 
 * @author
 * Dmytro Shakh
 */
package com.chyvacheck.tasktracker.middleware.validate;

/**
 * ! lib imports
 */
import io.javalin.http.Context;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.ValidatorFactory;

/**
 * ! java imports
 */
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 * ! my imports
 */
import com.chyvacheck.tasktracker.core.base.BaseException;
import com.chyvacheck.tasktracker.core.exceptions.base.ErrorCode;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;

/**
 * Middleware –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
 */
public class ValidateMiddleware {

	private static final ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
	private static final Validator validator = factory.getValidator();

	/**
	 * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (body) –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ DTO.
	 *
	 * @param ctx      –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
	 * @param dtoClass –∫–ª–∞—Å—Å —Ü–µ–ª–µ–≤–æ–≥–æ DTO
	 * @return –≤–∞–ª–∏–¥–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DTO
	 * @throws Exception –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–ª–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
	 */
	public static <T> T fromBody(Context ctx, Class<T> dtoClass) throws Exception {
		try {
			T dto = ctx.bodyAsClass(dtoClass);
			return validate(dto);
		} catch (Exception e) {
			handleDeserializationError(e);
			throw new IllegalStateException("Unreachable");
		}
	}

	/**
	 * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ DTO.
	 *
	 * @param ctx      –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
	 * @param dtoClass –∫–ª–∞—Å—Å —Ü–µ–ª–µ–≤–æ–≥–æ DTO
	 * @return –≤–∞–ª–∏–¥–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DTO
	 * @throws Exception –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–ª–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
	 */
	public static <T> T fromQuery(Context ctx, Class<T> dtoClass) throws Exception {
		try {
			T dto = dtoClass.getDeclaredConstructor().newInstance();

			for (Field field : dtoClass.getDeclaredFields()) {
				field.setAccessible(true);
				String name = field.getName();
				String value = ctx.queryParam(name);
				if (value != null) {
					// –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å string ‚Üí –Ω—É–∂–Ω—ã–π —Ç–∏–ø
					Object parsed = parseValue(field.getType(), value);
					field.set(dto, parsed);
				}
			}

			return validate(dto);
		} catch (Exception e) {
			handleDeserializationError(e);
			throw new IllegalStateException("Unreachable");
		}
	}

	/**
	 * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å path-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ DTO.
	 *
	 * @param ctx      –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
	 * @param dtoClass –∫–ª–∞—Å—Å —Ü–µ–ª–µ–≤–æ–≥–æ DTO
	 * @return –≤–∞–ª–∏–¥–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DTO
	 * @throws Exception –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–ª–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
	 */
	public static <T> T fromPath(Context ctx, Class<T> dtoClass) throws Exception {
		try {
			T dto = dtoClass.getDeclaredConstructor().newInstance();

			for (Field field : dtoClass.getDeclaredFields()) {
				field.setAccessible(true);
				String name = field.getName();
				String value = ctx.pathParamMap().get(name);

				if (value != null) {
					Object parsed = parseValue(field.getType(), value);
					field.set(dto, parsed);
				}
			}

			return validate(dto);
		} catch (Exception e) {
			handleDeserializationError(e);
			throw new IllegalStateException("Unreachable");
		}
	}

	/**
	 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è.
	 *
	 * @param type  –∫–ª–∞—Å—Å —Ç–∏–ø–∞ –ø–æ–ª—è
	 * @param value —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	 * @return –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	 */
	private static Object parseValue(Class<?> type, String value) {
		if (type == int.class || type == Integer.class)
			return Integer.parseInt(value);
		if (type == long.class || type == Long.class)
			return Long.parseLong(value);
		if (type == boolean.class || type == Boolean.class)
			return Boolean.parseBoolean(value);
		if (type == String.class)
			return value;
		// –ò —Ç.–¥. –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
		return null;
	}

	/**
	 * –ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é DTO —á–µ—Ä–µ–∑ Validator.
	 *
	 * @param dto –æ–±—ä–µ–∫—Ç DTO
	 * @param <T> —Ç–∏–ø DTO
	 * @return –≤–∞–ª–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç DTO
	 * @throws BaseException –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	 */
	private static <T> T validate(T dto) {
		System.out.println("üì• validate –≤—ã–∑–≤–∞–Ω");

		Set<ConstraintViolation<T>> violations = validator.validate(dto);

		if (!violations.isEmpty()) {
			Map<String, String> errors = new HashMap<>();
			for (ConstraintViolation<T> violation : violations) {
				String field = violation.getPropertyPath().toString();
				String message = violation.getMessage();
				errors.put(field, message);
			}

			throw new BaseException("Validation failed", ErrorCode.VALIDATION_FAILED, null, errors);

		}

		return dto;
	}

	/**
	 * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.
	 *
	 * @param e –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
	 * @throws BaseException –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
	 */
	private static void handleDeserializationError(Exception e) throws Exception {
		// ? –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å `json` –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞
		if (e instanceof JsonParseException jpe) {
			throw new BaseException(
					"Invalid JSON format",
					ErrorCode.JSON_PARSE_ERROR,
					Map.of("exception", jpe.getClass().getSimpleName()),
					null);
		}

		// ? –ï—Å–ª–∏ –∫–ª—é—á–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
		if (e instanceof UnrecognizedPropertyException upe) {
			String unexpectedField = upe.getPropertyName();

			Map<String, String> errors = Map.of(
					unexpectedField, "Unexpected field");

			throw new BaseException(
					"Request contains unexpected property",
					ErrorCode.UNKNOWN_PROPERTY,
					Map.of("exception", upe.getClass().getSimpleName()),
					errors);
		}

		// ? –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
		if (e instanceof MismatchedInputException mie) {

			// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
			String field = mie.getPath().stream()
					.map(ref -> ref.getFieldName())
					.filter(name -> name != null)
					.findFirst()
					.orElse("body");

			String expected = mie.getTargetType() != null
					? mie.getTargetType().getSimpleName()
					: "unknown";

			String received = "unknown";

			// –ï—Å–ª–∏ —ç—Ç–æ InvalidFormatException ‚Äî –∏–∑–≤–ª–µ—á—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
			if (mie instanceof InvalidFormatException ife) {
				Object value = ife.getValue();
				if (value != null) {
					received = value.getClass().getSimpleName().toLowerCase();
				} else {
					received = "null";
				}
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			String reason = "Expected " + expected + " but got " + received;

			Map<String, String> fieldErrors = Map.of(field, reason);

			throw new BaseException(
					"Invalid request body",
					ErrorCode.VALIDATION_FAILED,
					Map.of("exception", mie.getClass().getSimpleName()),
					fieldErrors);
		}

		// ? –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å `json` –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞
		if (e instanceof JsonMappingException jme) {
			throw new BaseException(
					"Invalid JSON format",
					ErrorCode.JSON_MAPPING_ERROR,
					Map.of("exception", jme.getClass().getSimpleName()),
					null);
		}

		// ? –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
		throw e;
	}
}
